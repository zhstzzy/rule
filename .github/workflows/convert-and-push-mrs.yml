name: Convert & Push Mihomo MRS to Repo Root (Fixed gh download & latest tag)

on:
  workflow_dispatch:
    # No inputs needed as all parameters are hardcoded for this specific conversion

jobs:
  convert-and-push-ruleset:
    runs-on: ubuntu-latest
    permissions:
      contents: write # 允许上传 Artifacts 和向仓库写入

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }} 
          fetch-depth: 0 

      - name: Get Latest Mihomo Release Tag via API
        id: get_release_tag # Assign an ID to this step to access its outputs
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Ensure GH_TOKEN is available for gh CLI
        run: |
          # Fetch the latest release details directly from the GitHub API using gh api
          # Then use jq to extract the tag_name
          LATEST_TAG=$(gh api /repos/MetaCubeX/mihomo/releases/latest --jq .tag_name)
          
          if [ -z "$LATEST_TAG" ]; then
            echo "Error: Could not retrieve latest release tag from MetaCubeX/mihomo."
            exit 1
          fi
          
          echo "Latest Mihomo Release Tag: $LATEST_TAG"
          # Set the tag as an output for subsequent steps
          echo "tag=$LATEST_TAG" >> "$GITHUB_OUTPUT"

      - name: Determine download pattern and download Mihomo (Linux AMD64 .gz)
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
          SELECTED_OS: linux
          SELECTED_ARCH: amd64
          MIHOMO_RELEASE_TAG: ${{ steps.get_release_tag.outputs.tag }} # Use the output from the previous step
        run: |
          DOWNLOAD_PATTERN="mihomo-${SELECTED_OS}-${SELECTED_ARCH}-${MIHOMO_RELEASE_TAG}.gz" 
          
          echo "Attempting to download assets matching: $DOWNLOAD_PATTERN"
          
          mkdir -p ./mihomo-downloads

          # Now, use the obtained tag name for downloading specific assets
          gh release download \
            --repo MetaCubeX/mihomo \
            "$MIHOMO_RELEASE_TAG" \ # <--- 使用从 API 获取的标签名
            --pattern "$DOWNLOAD_PATTERN" \
            --dir ./mihomo-downloads \
            --clobber
          
          echo "Downloaded files:"
          ls -l ./mihomo-downloads/

      - name: Unpack Mihomo executable (gunzip) and set permissions
        id: unpack_mihomo
        env:
          SELECTED_OS: linux
          SELECTED_ARCH: amd64
        run: |
          DOWNLOAD_DIR="./mihomo-downloads"
          GZ_FILE=""
          MIHOMO_EXECUTABLE_PATH=""
          
          GZ_FILE=$(find "$DOWNLOAD_DIR" -maxdepth 1 -name "mihomo-${SELECTED_OS}-${SELECTED_ARCH}*.gz" -print -quit)
          
          if [ -z "$GZ_FILE" ]; then
            echo "Error: Mihomo GZ file not found for ${SELECTED_OS}/${SELECTED_ARCH} in $DOWNLOAD_DIR"
            exit 1
          fi
          
          echo "Decompressing GZ file: $GZ_FILE"
          gunzip "$GZ_FILE"
          
          MIHOMO_EXECUTABLE_PATH=$(find "$DOWNLOAD_DIR" -maxdepth 1 -name "mihomo-${SELECTED_OS}-${SELECTED_ARCH}*" -type f -a ! -name "*.gz" -print -quit)
          
          if [ -z "$MIHOMO_EXECUTABLE_PATH" ]; then
            echo "Error: Mihomo executable not found after decompression in $DOWNLOAD_DIR"
            exit 1
          fi
          
          echo "Setting execute permission for: $MIHOMO_EXECUTABLE_PATH"
          chmod +x "$MIHOMO_EXECUTABLE_PATH"
          
          echo "MIHOMO executable path determined as: $MIHOMO_EXECUTABLE_PATH"
          echo "mihomo_path=$MIHOMO_EXECUTABLE_PATH" >> "$GITHUB_OUTPUT"

      - name: Convert Ruleset using Mihomo
        run: |
          MIHOMO_BIN="${{ steps.unpack_mihomo.outputs.mihomo_path }}"
          INPUT_FILE="${{ github.workspace }}/privateDomain.yaml" # Assumed in repo root
          TEMP_OUTPUT_DIR="temp-mihomo-output"
          TEMP_OUTPUT_FILE="$TEMP_OUTPUT_DIR/privateDomain.mrs"
          
          mkdir -p "$TEMP_OUTPUT_DIR"
          
          if [ ! -f "$INPUT_FILE" ]; then
            echo "Error: Input file '$INPUT_FILE' not found in your repository's root directory."
            echo "Please ensure 'privateDomain.yaml' exists directly in the repository's root."
            exit 1
          fi
          
          echo "Executing: $MIHOMO_BIN convert-ruleset domain yaml \"$INPUT_FILE\" \"$TEMP_OUTPUT_FILE\""
          
          "$MIHOMO_BIN" convert-ruleset \
            "domain" \
            "yaml" \
            "$INPUT_FILE" \
            "$TEMP_OUTPUT_FILE"
          
          if [ $? -ne 0 ]; then
            echo "Mihomo conversion failed!"
            exit 1
          fi
          
          echo "Mihomo conversion completed successfully. Generated temporary file: $TEMP_OUTPUT_FILE"
          ls -l "$TEMP_OUTPUT_DIR"

          mv "$TEMP_OUTPUT_FILE" "${{ github.workspace }}/privateDomain.mrs"
          echo "Moved privateDomain.mrs to repository root."

      - name: Commit and Push Converted MRS file to Repository
        run: |
          TARGET_FILE_IN_REPO="privateDomain.mrs"
          
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          git add "$TARGET_FILE_IN_REPO"
          
          if git status --porcelain | grep "$TARGET_FILE_IN_REPO"; then
            echo "Changes detected for $TARGET_FILE_IN_REPO. Committing..."
            git commit -m "chore: Update privateDomain.mrs [skip ci]"
            git push origin HEAD
            echo "Successfully committed and pushed $TARGET_FILE_IN_REPO to repository."
          else
            echo "No changes detected for $TARGET_FILE_IN_REPO. Skipping commit."
          fi